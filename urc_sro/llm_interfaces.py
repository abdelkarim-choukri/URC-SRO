from typing import Protocol, List, Tuple, Optional
from .types import Document

class LLM(Protocol):
    """Framework-agnostic interface for generation."""
    def generate(self, prompt: str, system: Optional[str] = None) -> str: ...
    def generate_answer_with_steps(self, query: str, context: List[Document]) -> Tuple[str, List[str]]: ...
    def generate_next_step(self, query: str, context: List[Document], prior_steps: List[str]) -> str: ...
    def self_refine_step(self, step: str, feedback: str) -> str: ...
    def self_refine_answer(self, answer: str, feedback: str) -> str: ...
